// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ChatRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatRpcSrvcClient is the client API for ChatRpcSrvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRpcSrvcClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRpcSrvc_ChatClient, error)
}

type chatRpcSrvcClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRpcSrvcClient(cc grpc.ClientConnInterface) ChatRpcSrvcClient {
	return &chatRpcSrvcClient{cc}
}

func (c *chatRpcSrvcClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRpcSrvc_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatRpcSrvc_serviceDesc.Streams[0], "/ChatRpc.ChatRpcSrvc/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRpcSrvcChatClient{stream}
	return x, nil
}

type ChatRpcSrvc_ChatClient interface {
	Send(*ClientToServerMessage) error
	Recv() (*ServerToClientMessage, error)
	grpc.ClientStream
}

type chatRpcSrvcChatClient struct {
	grpc.ClientStream
}

func (x *chatRpcSrvcChatClient) Send(m *ClientToServerMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRpcSrvcChatClient) Recv() (*ServerToClientMessage, error) {
	m := new(ServerToClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatRpcSrvcServer is the server API for ChatRpcSrvc service.
// All implementations must embed UnimplementedChatRpcSrvcServer
// for forward compatibility
type ChatRpcSrvcServer interface {
	Chat(ChatRpcSrvc_ChatServer) error
	mustEmbedUnimplementedChatRpcSrvcServer()
}

// UnimplementedChatRpcSrvcServer must be embedded to have forward compatible implementations.
type UnimplementedChatRpcSrvcServer struct {
}

func (*UnimplementedChatRpcSrvcServer) Chat(ChatRpcSrvc_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (*UnimplementedChatRpcSrvcServer) mustEmbedUnimplementedChatRpcSrvcServer() {}

func RegisterChatRpcSrvcServer(s *grpc.Server, srv ChatRpcSrvcServer) {
	s.RegisterService(&_ChatRpcSrvc_serviceDesc, srv)
}

func _ChatRpcSrvc_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatRpcSrvcServer).Chat(&chatRpcSrvcChatServer{stream})
}

type ChatRpcSrvc_ChatServer interface {
	Send(*ServerToClientMessage) error
	Recv() (*ClientToServerMessage, error)
	grpc.ServerStream
}

type chatRpcSrvcChatServer struct {
	grpc.ServerStream
}

func (x *chatRpcSrvcChatServer) Send(m *ServerToClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRpcSrvcChatServer) Recv() (*ClientToServerMessage, error) {
	m := new(ClientToServerMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatRpcSrvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ChatRpc.ChatRpcSrvc",
	HandlerType: (*ChatRpcSrvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatRpcSrvc_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
