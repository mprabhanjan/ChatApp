//
// Defines RPC for the Chat application

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.11.4
// source: chat.proto

package ChatRpc

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientVer        string `protobuf:"bytes,1,opt,name=client_ver,json=clientVer,proto3" json:"client_ver,omitempty"`
	Https            bool   `protobuf:"varint,2,opt,name=https,proto3" json:"https,omitempty"`
	UserName         string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	OpaqueClientData string `protobuf:"bytes,4,opt,name=opaque_client_data,json=opaqueClientData,proto3" json:"opaque_client_data,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Hello) GetClientVer() string {
	if x != nil {
		return x.ClientVer
	}
	return ""
}

func (x *Hello) GetHttps() bool {
	if x != nil {
		return x.Https
	}
	return false
}

func (x *Hello) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Hello) GetOpaqueClientData() string {
	if x != nil {
		return x.OpaqueClientData
	}
	return ""
}

type HelloAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerVer        string `protobuf:"bytes,1,opt,name=server_ver,json=serverVer,proto3" json:"server_ver,omitempty"`
	Https            bool   `protobuf:"varint,2,opt,name=https,proto3" json:"https,omitempty"`
	ClientId         string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	OpaqueClientData string `protobuf:"bytes,4,opt,name=opaque_client_data,json=opaqueClientData,proto3" json:"opaque_client_data,omitempty"`
}

func (x *HelloAck) Reset() {
	*x = HelloAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloAck) ProtoMessage() {}

func (x *HelloAck) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloAck.ProtoReflect.Descriptor instead.
func (*HelloAck) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *HelloAck) GetServerVer() string {
	if x != nil {
		return x.ServerVer
	}
	return ""
}

func (x *HelloAck) GetHttps() bool {
	if x != nil {
		return x.Https
	}
	return false
}

func (x *HelloAck) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *HelloAck) GetOpaqueClientData() string {
	if x != nil {
		return x.OpaqueClientData
	}
	return ""
}

type ClientChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageText      string `protobuf:"bytes,1,opt,name=message_text,json=messageText,proto3" json:"message_text,omitempty"`
	ToClientName     string `protobuf:"bytes,2,opt,name=to_client_name,json=toClientName,proto3" json:"to_client_name,omitempty"`
	Broadcast        bool   `protobuf:"varint,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	OpaqueClientData string `protobuf:"bytes,4,opt,name=opaque_client_data,json=opaqueClientData,proto3" json:"opaque_client_data,omitempty"`
}

func (x *ClientChatMessage) Reset() {
	*x = ClientChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientChatMessage) ProtoMessage() {}

func (x *ClientChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientChatMessage.ProtoReflect.Descriptor instead.
func (*ClientChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *ClientChatMessage) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

func (x *ClientChatMessage) GetToClientName() string {
	if x != nil {
		return x.ToClientName
	}
	return ""
}

func (x *ClientChatMessage) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *ClientChatMessage) GetOpaqueClientData() string {
	if x != nil {
		return x.OpaqueClientData
	}
	return ""
}

type ClientChatMessageAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgAck           bool   `protobuf:"varint,1,opt,name=msg_ack,json=msgAck,proto3" json:"msg_ack,omitempty"` // true=ack; false=nack
	OpaqueClientData string `protobuf:"bytes,2,opt,name=opaque_client_data,json=opaqueClientData,proto3" json:"opaque_client_data,omitempty"`
}

func (x *ClientChatMessageAck) Reset() {
	*x = ClientChatMessageAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientChatMessageAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientChatMessageAck) ProtoMessage() {}

func (x *ClientChatMessageAck) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientChatMessageAck.ProtoReflect.Descriptor instead.
func (*ClientChatMessageAck) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *ClientChatMessageAck) GetMsgAck() bool {
	if x != nil {
		return x.MsgAck
	}
	return false
}

func (x *ClientChatMessageAck) GetOpaqueClientData() string {
	if x != nil {
		return x.OpaqueClientData
	}
	return ""
}

type ClientClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId         string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	OpaqueClientData string `protobuf:"bytes,4,opt,name=opaque_client_data,json=opaqueClientData,proto3" json:"opaque_client_data,omitempty"`
}

func (x *ClientClose) Reset() {
	*x = ClientClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientClose) ProtoMessage() {}

func (x *ClientClose) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientClose.ProtoReflect.Descriptor instead.
func (*ClientClose) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *ClientClose) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientClose) GetOpaqueClientData() string {
	if x != nil {
		return x.OpaqueClientData
	}
	return ""
}

type ClientCloseAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloseAck         bool   `protobuf:"varint,1,opt,name=close_ack,json=closeAck,proto3" json:"close_ack,omitempty"`
	OpaqueClientData string `protobuf:"bytes,2,opt,name=opaque_client_data,json=opaqueClientData,proto3" json:"opaque_client_data,omitempty"`
}

func (x *ClientCloseAck) Reset() {
	*x = ClientCloseAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCloseAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCloseAck) ProtoMessage() {}

func (x *ClientCloseAck) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCloseAck.ProtoReflect.Descriptor instead.
func (*ClientCloseAck) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *ClientCloseAck) GetCloseAck() bool {
	if x != nil {
		return x.CloseAck
	}
	return false
}

func (x *ClientCloseAck) GetOpaqueClientData() string {
	if x != nil {
		return x.OpaqueClientData
	}
	return ""
}

type ClientToServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*ClientToServerMessage_HelloMsg
	//	*ClientToServerMessage_NewMsg
	//	*ClientToServerMessage_CloseMsg
	ClientMessage isClientToServerMessage_ClientMessage `protobuf_oneof:"ClientMessage"`
}

func (x *ClientToServerMessage) Reset() {
	*x = ClientToServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServerMessage) ProtoMessage() {}

func (x *ClientToServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServerMessage.ProtoReflect.Descriptor instead.
func (*ClientToServerMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (m *ClientToServerMessage) GetClientMessage() isClientToServerMessage_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *ClientToServerMessage) GetHelloMsg() *Hello {
	if x, ok := x.GetClientMessage().(*ClientToServerMessage_HelloMsg); ok {
		return x.HelloMsg
	}
	return nil
}

func (x *ClientToServerMessage) GetNewMsg() *ClientChatMessage {
	if x, ok := x.GetClientMessage().(*ClientToServerMessage_NewMsg); ok {
		return x.NewMsg
	}
	return nil
}

func (x *ClientToServerMessage) GetCloseMsg() *ClientClose {
	if x, ok := x.GetClientMessage().(*ClientToServerMessage_CloseMsg); ok {
		return x.CloseMsg
	}
	return nil
}

type isClientToServerMessage_ClientMessage interface {
	isClientToServerMessage_ClientMessage()
}

type ClientToServerMessage_HelloMsg struct {
	HelloMsg *Hello `protobuf:"bytes,1,opt,name=hello_msg,json=helloMsg,proto3,oneof"`
}

type ClientToServerMessage_NewMsg struct {
	NewMsg *ClientChatMessage `protobuf:"bytes,2,opt,name=new_msg,json=newMsg,proto3,oneof"`
}

type ClientToServerMessage_CloseMsg struct {
	CloseMsg *ClientClose `protobuf:"bytes,3,opt,name=close_msg,json=closeMsg,proto3,oneof"`
}

func (*ClientToServerMessage_HelloMsg) isClientToServerMessage_ClientMessage() {}

func (*ClientToServerMessage_NewMsg) isClientToServerMessage_ClientMessage() {}

func (*ClientToServerMessage_CloseMsg) isClientToServerMessage_ClientMessage() {}

type ServerClientChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromClient string `protobuf:"bytes,1,opt,name=from_client,json=fromClient,proto3" json:"from_client,omitempty"`
	Broadcast  bool   `protobuf:"varint,2,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServerClientChatMessage) Reset() {
	*x = ServerClientChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerClientChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerClientChatMessage) ProtoMessage() {}

func (x *ServerClientChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerClientChatMessage.ProtoReflect.Descriptor instead.
func (*ServerClientChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *ServerClientChatMessage) GetFromClient() string {
	if x != nil {
		return x.FromClient
	}
	return ""
}

func (x *ServerClientChatMessage) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

func (x *ServerClientChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ServerToClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ServerMsg:
	//	*ServerToClientMessage_HelloAck
	//	*ServerToClientMessage_MsgAck
	//	*ServerToClientMessage_ClientMsg
	//	*ServerToClientMessage_CloseAck
	ServerMsg isServerToClientMessage_ServerMsg `protobuf_oneof:"ServerMsg"`
}

func (x *ServerToClientMessage) Reset() {
	*x = ServerToClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClientMessage) ProtoMessage() {}

func (x *ServerToClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClientMessage.ProtoReflect.Descriptor instead.
func (*ServerToClientMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{8}
}

func (m *ServerToClientMessage) GetServerMsg() isServerToClientMessage_ServerMsg {
	if m != nil {
		return m.ServerMsg
	}
	return nil
}

func (x *ServerToClientMessage) GetHelloAck() *HelloAck {
	if x, ok := x.GetServerMsg().(*ServerToClientMessage_HelloAck); ok {
		return x.HelloAck
	}
	return nil
}

func (x *ServerToClientMessage) GetMsgAck() *ClientChatMessageAck {
	if x, ok := x.GetServerMsg().(*ServerToClientMessage_MsgAck); ok {
		return x.MsgAck
	}
	return nil
}

func (x *ServerToClientMessage) GetClientMsg() *ServerClientChatMessage {
	if x, ok := x.GetServerMsg().(*ServerToClientMessage_ClientMsg); ok {
		return x.ClientMsg
	}
	return nil
}

func (x *ServerToClientMessage) GetCloseAck() *ClientCloseAck {
	if x, ok := x.GetServerMsg().(*ServerToClientMessage_CloseAck); ok {
		return x.CloseAck
	}
	return nil
}

type isServerToClientMessage_ServerMsg interface {
	isServerToClientMessage_ServerMsg()
}

type ServerToClientMessage_HelloAck struct {
	HelloAck *HelloAck `protobuf:"bytes,1,opt,name=hello_ack,json=helloAck,proto3,oneof"`
}

type ServerToClientMessage_MsgAck struct {
	MsgAck *ClientChatMessageAck `protobuf:"bytes,2,opt,name=msg_ack,json=msgAck,proto3,oneof"`
}

type ServerToClientMessage_ClientMsg struct {
	ClientMsg *ServerClientChatMessage `protobuf:"bytes,3,opt,name=client_msg,json=clientMsg,proto3,oneof"`
}

type ServerToClientMessage_CloseAck struct {
	CloseAck *ClientCloseAck `protobuf:"bytes,4,opt,name=close_ack,json=closeAck,proto3,oneof"`
}

func (*ServerToClientMessage_HelloAck) isServerToClientMessage_ServerMsg() {}

func (*ServerToClientMessage_MsgAck) isServerToClientMessage_ServerMsg() {}

func (*ServerToClientMessage_ClientMsg) isServerToClientMessage_ServerMsg() {}

func (*ServerToClientMessage_CloseAck) isServerToClientMessage_ServerMsg() {}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x70, 0x63, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x8a, 0x01, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x41, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a,
	0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x5b, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41,
	0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x01,
	0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70,
	0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x12, 0x33, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x41, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x41, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x36, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x5b, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x70, 0x63,
	0x53, 0x72, 0x76, 0x63, 0x12, 0x4c, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1e, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_chat_proto_goTypes = []interface{}{
	(*Hello)(nil),                   // 0: ChatRpc.Hello
	(*HelloAck)(nil),                // 1: ChatRpc.HelloAck
	(*ClientChatMessage)(nil),       // 2: ChatRpc.ClientChatMessage
	(*ClientChatMessageAck)(nil),    // 3: ChatRpc.ClientChatMessageAck
	(*ClientClose)(nil),             // 4: ChatRpc.ClientClose
	(*ClientCloseAck)(nil),          // 5: ChatRpc.ClientCloseAck
	(*ClientToServerMessage)(nil),   // 6: ChatRpc.ClientToServerMessage
	(*ServerClientChatMessage)(nil), // 7: ChatRpc.ServerClientChatMessage
	(*ServerToClientMessage)(nil),   // 8: ChatRpc.ServerToClientMessage
}
var file_chat_proto_depIdxs = []int32{
	0, // 0: ChatRpc.ClientToServerMessage.hello_msg:type_name -> ChatRpc.Hello
	2, // 1: ChatRpc.ClientToServerMessage.new_msg:type_name -> ChatRpc.ClientChatMessage
	4, // 2: ChatRpc.ClientToServerMessage.close_msg:type_name -> ChatRpc.ClientClose
	1, // 3: ChatRpc.ServerToClientMessage.hello_ack:type_name -> ChatRpc.HelloAck
	3, // 4: ChatRpc.ServerToClientMessage.msg_ack:type_name -> ChatRpc.ClientChatMessageAck
	7, // 5: ChatRpc.ServerToClientMessage.client_msg:type_name -> ChatRpc.ServerClientChatMessage
	5, // 6: ChatRpc.ServerToClientMessage.close_ack:type_name -> ChatRpc.ClientCloseAck
	6, // 7: ChatRpc.ChatRpcSrvc.Chat:input_type -> ChatRpc.ClientToServerMessage
	8, // 8: ChatRpc.ChatRpcSrvc.Chat:output_type -> ChatRpc.ServerToClientMessage
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientChatMessageAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCloseAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerClientChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chat_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ClientToServerMessage_HelloMsg)(nil),
		(*ClientToServerMessage_NewMsg)(nil),
		(*ClientToServerMessage_CloseMsg)(nil),
	}
	file_chat_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ServerToClientMessage_HelloAck)(nil),
		(*ServerToClientMessage_MsgAck)(nil),
		(*ServerToClientMessage_ClientMsg)(nil),
		(*ServerToClientMessage_CloseAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
